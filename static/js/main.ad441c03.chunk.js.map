{"version":3,"sources":["BookList.js","App.js","serviceWorker.js","index.js"],"names":["BookList","props","toggleEditBookModal","setState","editModalState","state","handleChange","e","editBookData","target","name","value","editBook","id","title","rating","updateBook","axios","put","then","res","refreshList","catch","err","console","log","deleteBook","delete","bind","books","this","map","book","key","Button","color","size","className","onClick","Modal","isOpen","toggle","ModalHeader","ModalBody","FormGroup","Label","for","Input","onChange","ModalFooter","React","Component","App","toggleNewBookModal","addModalState","addBook","post","newBookData","push","data","get","resp","Container","Table","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ad441c03.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  FormGroup,\n  Label,\n  Input,\n} from 'reactstrap';\nimport axios from 'axios';\n\nclass BookList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editBookData: {\n        id: 0,\n        title: '',\n        rating: '',\n      },\n      editModalState: false,\n    };\n\n    this.toggleEditBookModal = this.toggleEditBookModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.editBook = this.editBook.bind(this);\n    this.updateBook = this.updateBook.bind(this);\n    this.deleteBook = this.deleteBook.bind(this);\n  }\n\n  toggleEditBookModal = () => {\n    this.setState({\n      editModalState: !this.state.editModalState,\n    });\n  };\n\n  handleChange = (e) => {\n    let { editBookData } = this.state;\n    editBookData[e.target.name] = e.target.value;\n    this.setState({\n      editBookData,\n    });\n  };\n\n  editBook = (id, title, rating) => {\n    this.setState({\n      editBookData: {\n        id,\n        title,\n        rating,\n      },\n      editModalState: !this.state.editModalState,\n    });\n  };\n\n  updateBook = () => {\n    let { title, rating } = this.state.editBookData;\n    axios\n      .put('https://tranquil-gorge-80875.herokuapp.com/books/' + this.state.editBookData.id, {\n        title,\n        rating,\n      })\n      .then((res) => {\n        //   console.log(res.data);\n        this.props.refreshList();\n\n        this.setState({\n          editModalState: false,\n        });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  deleteBook = (id) => {\n    axios.delete('https://tranquil-gorge-80875.herokuapp.com/books/' + id).then((res) => {\n      this.props.refreshList();\n    });\n  };\n\n  render() {\n    const { books } = this.props;\n    return (\n      <>\n        {books.map((book) => (\n          <tr key={book.id}>\n            <td>{book.id}</td>\n            <td>{book.title}</td>\n            <td>{book.rating}</td>\n            <td>\n              <Button\n                color=\"success\"\n                size=\"sm\"\n                className=\"mr-2\"\n                onClick={this.editBook.bind(\n                  this,\n                  book.id,\n                  book.title,\n                  book.rating\n                )}\n              >\n                Edit\n              </Button>\n              <Button\n                color=\"danger\"\n                size=\"sm\"\n                onClick={this.deleteBook.bind(this, book.id)}\n              >\n                Delete\n              </Button>\n            </td>\n          </tr>\n        ))}\n\n        <Modal\n          isOpen={this.state.editModalState}\n          toggle={this.toggleEditBookModal}\n        >\n          <ModalHeader toggle={this.toggleEditBookModal}>\n            Add a new Book\n          </ModalHeader>\n          <ModalBody>\n            <FormGroup>\n              <Label for=\"bookTitle\">Title</Label>\n              <Input\n                id=\"bookTitle\"\n                value={this.state.editBookData.title}\n                name=\"title\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for=\"bookRating\">Rating</Label>\n              <Input\n                id=\"bookRating\"\n                value={this.state.editBookData.rating}\n                name=\"rating\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.updateBook}>\n              Update Book\n            </Button>{' '}\n            <Button color=\"secondary\" onClick={this.toggleEditBookModal}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default BookList;\n","import React from 'react';\nimport axios from 'axios';\nimport {\n  Container,\n  Table,\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  FormGroup,\n  Label,\n  Input,\n} from 'reactstrap';\nimport BookList from './BookList';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      books: [],\n      newBookData: {\n        title: '',\n        rating: '',\n      },\n      addModalState: false,\n    };\n\n    this.toggleNewBookModal = this.toggleNewBookModal.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentWillMount() {\n    this.refreshList();\n  }\n\n  toggleNewBookModal = () => {\n    this.setState({\n      addModalState: !this.state.addModalState,\n    });\n  };\n\n  addBook = () => {\n    axios\n      .post('https://tranquil-gorge-80875.herokuapp.com/books', this.state.newBookData)\n      .then((res) => {\n        let { books } = this.state;\n        books.push(res.data);\n        this.setState({\n          books,\n          newBookData: {\n            title: '',\n            rating: '',\n          },\n          addModalState: false,\n        });\n      });\n  };\n\n  handleChange = (e) => {\n    let { newBookData } = this.state;\n    newBookData[e.target.name] = e.target.value;\n    this.setState({\n      newBookData,\n    });\n  };\n\n  refreshList = () => {\n    axios.get('https://tranquil-gorge-80875.herokuapp.com/books').then((resp) => {\n      this.setState({\n        books: resp.data,\n      });\n    });\n  };\n\n  render() {\n    const { books } = this.state;\n\n    return (\n      <Container className=\"App\">\n        <h1>Book App</h1>\n        <Button\n          className=\"my-3\"\n          color=\"primary\"\n          onClick={this.toggleNewBookModal}\n        >\n          Add Book\n        </Button>\n        <Modal\n          isOpen={this.state.addModalState}\n          toggle={this.toggleNewBookModal}\n        >\n          <ModalHeader toggle={this.toggleNewBookModal}>\n            Add a new Book\n          </ModalHeader>\n          <ModalBody>\n            <FormGroup>\n              <Label for=\"title\">Title</Label>\n              <Input\n                id=\"title\"\n                value={this.state.newBookData.title}\n                name=\"title\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n\n            <FormGroup>\n              <Label for=\"rating\">Rating</Label>\n              <Input\n                id=\"rating\"\n                value={this.state.newBookData.rating}\n                name=\"rating\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.addBook}>\n              Add Book\n            </Button>{' '}\n            <Button color=\"secondary\" onClick={this.toggleNewBookModal}>\n              Cancel\n            </Button>\n          </ModalFooter>\n        </Modal>\n        <Table>\n          <thead>\n            <tr>\n              <th>Id</th>\n              <th>Title</th>\n              <th>Ratings</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <BookList books={books} refreshList={this.refreshList} />\n          </tbody>\n        </Table>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}